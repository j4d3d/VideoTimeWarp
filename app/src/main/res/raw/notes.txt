BATCH STYLE WARPING

decode range min (drMin): batchFloor-(warpAmount-1)
decode range max (drMax): batchFloor+(batchSize-1)

ex// batchSize: 4, batchFloor: 36, warpAmount: 7, decode range: 30 - 39

init step:
    create 4 textures with FBOs

batch init step:
    clear each texture

warp loop:
    start decoding at frame: batchFloor
    bind decoded frame texture
    for each applicable batch frame:
        bind batch frame fbo
        tell shader what batch frame we are on and which we are writing to
        pass batch frame texture into shader
        glViewPort (render to frame)
    when last decoded frame is reached and looped over, for each batch frame:
        OutputSurface.awaitNewImage();
        change TextureRender's mTextureID to batch frame texture id
        outputSurface.drawImage();
    shift batchFloor and seek extractor to that frame



batchSize n performance increase over batchSize of 1:
    about 1/batchSize, so batchSize does not need to be large to result in better performance.
    the question is how it will be determined.

optimizations:
 - frag shader could be optimized in a number of ways, but one solid one is to:
    -: change from using ns or us to using ms. then could switch from highp to mediump precision.
    - reduce if-statements?
 - seeking and batchsize are the real limiters, though.




 Left to be done (ordered by estimated difficulty):

 x Enable some different warp modes and "Invert Warp"
 - Handle video orientation by rotating the UV coords in TextureRender
 - Warp halting
 - Time stretching (should not be hard at all)
 - Remove evil black bar on eldest frame
 - Black padding frames on beginning and end
        ~ not hard but time consuming ~
 - Test on AWS (deposit some $ in acct. first)
 - Add VTW icon and ensure theme is consistent or at least usable across devices
